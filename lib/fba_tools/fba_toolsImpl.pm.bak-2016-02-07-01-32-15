package fba_tools::fba_toolsImpl;
use strict;
use Bio::KBase::Exceptions;
# Use Semantic Versioning (2.0.0-rc.1)
# http://semver.org 
our $VERSION = "0.1.0";

=head1 NAME

fba_tools

=head1 DESCRIPTION

A KBase module: fba_tools
This module contains the implementation for the primary methods in KBase for metabolic model reconstruction, gapfilling, and analysis

=cut

#BEGIN_HEADER
use Bio::KBase::AuthToken;
use Bio::KBase::workspace::Client;
use Config::IniFiles;
use Data::Dumper;

#Initialization function for call
sub util_initialize_call {
	my ($self,$params,$ctx) = @_;
	print("Starting ".$ctx->method()." method.\n");
	Bio::KBase::ObjectAPI::utilities::elaspedtime();
	Bio::KBase::ObjectAPI::config::username($ctx->user_id());
	Bio::KBase::ObjectAPI::config::token($ctx->token());
	Bio::KBase::ObjectAPI::config::provenance($ctx->provenance());
	return $params;
}

sub util_validate_args {
	my ($self,$params,$mandatoryArguments,$optionalArguments) = @_;
	print "Retrieving input parameters.\n";
	return Bio::KBase::ObjectAPI::utilities::ARGS($params,$mandatoryArguments,$optionalArguments);
}

sub util_kbase_store {
	my ($self) = @_;
	$parameters = $self->validate_args($parameters,[],{
		kbwsurl => Bio::KBase::ObjectAPI::config::kbwsurl(),
		kbuser => undef,
		kbpassword => undef,
		kbtoken => undef
    });
    my $wsClient=Bio::KBase::workspace::Client->new($self->{'workspace-url'},token=>$token);
    
    
    my $wsclient = Bio::KBase::workspace::Client->new($parameters->{kbwsurl},token => $parameters->{kbtoken});
    return Bio::KBase::ObjectAPI::KBaseStore->new({
		provenance => [{
			"time" => DateTime->now()->datetime()."+0000",
			service_ver => $VERSION,
			service => "ProbModelSEED",
			method => Bio::KBase::ObjectAPI::config::method,
			method_params => [],
			input_ws_objects => [],
			resolved_ws_objects => [],
			intermediate_incoming => [],
			intermediate_outgoing => []
		}],
		workspace => $wsclient,
		file_cache => undef,
		cache_targets => [],
	});
	return $self->{_kbase_store};
}

sub func_build_metabolic_model {
	my ($self,$params) = @_;
	$params = $self->util_validate_args($params,["workspace","genome_id"],{
    	media_id => undef,
    	template_id => undef,
    	genome_workspace => $params->{workspace},
    	template_workspace => $params->{workspace},
    	media_workspace => $params->{workspace},
    	fbamodel_output_id => $params->{genome_id}.".model",
    	coremodel => 0,
    	gapfill_model => 1,
    	expseries_id => undef,
		expseries_workspace => $params->{workspace},
		exp_condition => undef,
		exp_threshold_percentile => 0.5,
		exp_threshold_margin => 0.1,
		media_supplements => [],
		alpha => 0,
		omega => 0,
		number_of_solutions => 1,
		thermodynamic_constraints => 0
    });
	#Getting genome
	print "Retrieving genome.\n";
	my $genome = $self->util_kbase_store()->get_object($params->{genome_workspace}."/".$params->{genome_id});
	#Classifying genome
	if (!defined($params->{template_id})) {
    	print "Classifying genome in order to select template.\n";
    	$params->{template_workspace} = "KBaseTemplateModels";
    	if ($genome->template_classification() eq "plant") {
    		$params->{template_id} =  = "PlantModelTemplate";
    	} elsif ($genome->template_classification() eq "Gram negative") {
    		$params->{template_id} =  = "GramNegModelTemplate";
    	} elsif ($genome->template_classification() eq "Gram positive") {
    		$params->{template_id} =  = "GramPosModelTemplate";
    	}
	}
    #Retrieving template
    print "Retrieving model template ".$params->{template_id}.".\n";
    my $genome = $self->util_kbase_store()->get_object($params->{template_workspace}."/".$params->{template_id});
    #Building the model
    my $model = $template->buildModel({
	    genome => $genome,
	    modelid => $params->{fbamodel_output_id},
	    fulldb => 0
	});
	#Gapfilling model if requested
	my $output;
	if ($params->{gapfill_model} == 1) {
		$output = $self->func_gapfill_metabolic_model({
			workspace => $params->{workspace},
			fbamodel_id => $params->{fbamodel_output_id},
			fbamodel_output_id => $params->{fbamodel_output_id},
			media_workspace => $params->{media_workspace},
			expseries_workspace => $params->{expseries_workspace},
			media_id => $params->{media_id},
			expseries_id => $params->{expseries_id},
			exp_condition => $params->{exp_condition},
			exp_threshold_percentile => $params->{exp_threshold_percentile},
			exp_threshold_margin => $params->{exp_threshold_margin},
			alpha => $params->{alpha},
			omega => $params->{omega},
			thermodynamic_constraints => $params->{thermodynamic_constraints},
		},$model);
	} else {
		#If not gapfilling, then we just save the model directly
		$output->{number_gapfilled_reactions} = 0;
		$output->{number_removed_biomass_compounds} = 0;
		my $wsmeta = $self->util_kbase_store()->save_object($model,$params->{workspace}."/".$params->{fbamodel_output_id});
		$output->{new_fbamodel_ref} = $params->{workspace}."/".$params->{fbamodel_output_id};
	}
	return $output;
}

sub func_gapfill_metabolic_model {
	my ($self,$params,$model) = @_;
	$params = $self->validate_args($params,["workspace","fbamodel_id"],{
    	fbamodel_workspace => $params->{workspace},
    	expseries_workspace => $params->{workspace},
    	media_workspace => $params->{workspace},
    	source_fbamodel_workspace => $params->{workspace},
    	media_id => undef,
		source_fbamodel_id => undef,
		expseries_id => undef,
    	exp_condition => undef,
    	exp_threshold_percentile => 0.5,
    	exp_threshold_margin => 0.1,
    	media_supplements => [],
    	target_reaction => "bio1",
    	minimum_target_flux => 0.01,
    	alpha => 0,
		omega => 0,
		number_of_solutions => 1,
		thermodynamic_constraints => 0,
    	fbamodel_output_id => $params->{fbamodel_id}
    });
    if (!defined($model)) {
    	print "Retrieving model.\n";
		$model = $self->util_kbase_store()->get_object($params->{fbamodel_workspace}."/".$params->{fbamodel_id});
    }
    my $expseries;
    if (defined($params->{expseries_id})) {
    	print "Retrieving expression matrix.\n";
    	$expseries = $self->util_kbase_store()->get_object($params->{expseries_workspace}."/".$params->{expseries_id});
    }
    if (!defined($params->{media_id})) {
    	$params->{media_id} = "Complete";
    	$params->{media_workspace} = "KBaseMedia";
    }
    print "Retrieving ".$params->{media_id}." media.\n";
    my $media = $self->util_kbase_store()->get_object($params->{media_workspace}."/".$params->{media_id});
    print "Preparing flux balance analysis problem.\n";
    
    
    print "Running flux balance analysis problem.\n";
    
    
    print "Saving gapfilled model.\n";
    my $wsmeta = $self->util_kbase_store()->save_object($model,$params->{workspace}."/".$params->{fbamodel_output_id});
	$output->{new_fbamodel_ref} = $params->{workspace}."/".$params->{fbamodel_output_id};
    print "Saving FBA object with gapfilling sensitivity analysis and flux.\n";
    $wsmeta = $self->util_kbase_store()->save_object($model,$params->{workspace}."/".$params->{fbamodel_output_id}.".".$gfid);
	$output->{new_fba_ref} = $params->{workspace}."/".$params->{fbamodel_output_id}.".".$gfid;
	return $output;
}





#END_HEADER

sub new
{
    my($class, @args) = @_;
    my $self = {
    };
    bless $self, $class;
    #BEGIN_CONSTRUCTOR
    
    my $config_file = $ENV{ KB_DEPLOYMENT_CONFIG };
    my $cfg = Config::IniFiles->new(-file=>$config_file);
    my $wsInstance = $cfg->val('fba_tools','workspace-url');
    die "no workspace-url defined" unless $wsInstance;
    
    $self->{'workspace-url'} = $wsInstance;
    
    #END_CONSTRUCTOR

    if ($self->can('_init_instance'))
    {
	$self->_init_instance();
    }
    return $self;
}

=head1 METHODS



=head2 genome_to_fbamodel

  $return = $obj->genome_to_fbamodel($params)

=over 4

=item Parameter and return types

=begin html

<pre>
$params is a fba_tools.GenomeToFBAModelParams
$return is a fba_tools.GenomeToFBAModelResults
GenomeToFBAModelParams is a reference to a hash where the following keys are defined:
	genome_id has a value which is a fba_tools.genome_id
	genome_workspace has a value which is a fba_tools.workspace_name
	template_id has a value which is a fba_tools.template_id
	template_workspace has a value which is a fba_tools.workspace_name
	media_id has a value which is a fba_tools.media_id
	media_workspace has a value which is a fba_tools.workspace_name
	fbamodel_id has a value which is a fba_tools.fbamodel_id
	workspace has a value which is a fba_tools.workspace_name
	coremodel has a value which is a fba_tools.bool
	gapfill_model has a value which is a fba_tools.bool
genome_id is a string
workspace_name is a string
template_id is a string
media_id is a string
fbamodel_id is a string
bool is an int
GenomeToFBAModelResults is a reference to a hash where the following keys are defined:
	new_fbamodel_ref has a value which is a fba_tools.ws_fbamodel_id
ws_fbamodel_id is a string

</pre>

=end html

=begin text

$params is a fba_tools.GenomeToFBAModelParams
$return is a fba_tools.GenomeToFBAModelResults
GenomeToFBAModelParams is a reference to a hash where the following keys are defined:
	genome_id has a value which is a fba_tools.genome_id
	genome_workspace has a value which is a fba_tools.workspace_name
	template_id has a value which is a fba_tools.template_id
	template_workspace has a value which is a fba_tools.workspace_name
	media_id has a value which is a fba_tools.media_id
	media_workspace has a value which is a fba_tools.workspace_name
	fbamodel_id has a value which is a fba_tools.fbamodel_id
	workspace has a value which is a fba_tools.workspace_name
	coremodel has a value which is a fba_tools.bool
	gapfill_model has a value which is a fba_tools.bool
genome_id is a string
workspace_name is a string
template_id is a string
media_id is a string
fbamodel_id is a string
bool is an int
GenomeToFBAModelResults is a reference to a hash where the following keys are defined:
	new_fbamodel_ref has a value which is a fba_tools.ws_fbamodel_id
ws_fbamodel_id is a string


=end text



=item Description

Build a genome-scale metabolic model based on annotations in an input genome typed object

=back

=cut

sub genome_to_fbamodel
{
    my $self = shift;
    my($params) = @_;

    my @_bad_arguments;
    (ref($params) eq 'HASH') or push(@_bad_arguments, "Invalid type for argument \"params\" (value was \"$params\")");
    if (@_bad_arguments) {
	my $msg = "Invalid arguments passed to genome_to_fbamodel:\n" . join("", map { "\t$_\n" } @_bad_arguments);
	Bio::KBase::Exceptions::ArgumentValidationError->throw(error => $msg,
							       method_name => 'genome_to_fbamodel');
    }

    my $ctx = $fba_tools::fba_toolsServer::CallContext;
    my($return);
    #BEGIN genome_to_fbamodel
    $self->initialize_call($params,$ctx);
    $output = $self->helper()->app_harness("ModelReconstruction",$input);
    
    
    
    if (!exists $params->{'workspace'}) {
        die "Parameter workspace is not set in input arguments";
    }
    my $workspace_name=$params->{'workspace'};
    
    if (!exists $params->{'contigset_id'}) {
        die "Parameter contigset_id is not set in input arguments";
    }
    my $contigset_id=$params->{'contigset_id'};
    
    if (!exists $params->{'min_length'}) {
        die "Parameter min_length is not set in input arguments";
    }
    my $min_length = $params->{'min_length'};
    if ($min_length < 0) {
        die "min_length parameter shouldn't be negative (".$min_length.")";
    }
    
    my $token=$ctx->token;
    my $provenance=;
    my $wsClient=Bio::KBase::workspace::Client->new($self->{'workspace-url'},token=>$token);
    my $contigSet=undef;
    eval {
        $contigSet=$wsClient->get_objects([{workspace=>$workspace_name,name=>$contigset_id}])->[0]{data};
    };
    if ($@) {
        die "Error loading original ContigSet object from workspace:\n".$@;
    }
    my $contigs=$contigSet->{contigs};

    print("Got ContigSet data.\n");
    
    my $good_contigs=[];
    my $n_total = 0;
    my $n_remaining = 0;
    for my $contig (@$contigs) {
        $n_total++;
        if (length($contig->{'sequence'}) >= $min_length) {
            push(@$good_contigs, $contig);
            $n_remaining++;
        }
    }

    # replace the contigs in the contigSet object in local memory
    $contigSet->{'contigs'} = $good_contigs;
    
    print("Filtered ContigSet to ".$n_remaining." contigs out of ".$n_total."\n");


    # save the new object to the workspace
    my $obj_info_list = undef;
    eval {
        $obj_info_list = $wsClient->save_objects({
            'workspace'=>$workspace_name,
            'objects'=>[{
                'type'=>'KBaseGenomes.ContigSet',
                'data'=>$contigSet,
                'name'=>$contigset_id,
                'provenance'=>$provenance
            }]
        });
    };
    if ($@) {
        die "Error saving filtered ContigSet object to workspace:\n".$@;
    }
    my $info = $obj_info_list->[0];

    print("saved:".Dumper($info)."\n");

    $return = {
        'new_contigset_ref'=>$info->[6].'/'.$info->[0].'/'.$info->[4],
        'n_initial_contigs'=>$n_total,
        'n_contigs_removed'=>$n_total-$n_remaining,
        'n_contigs_remaining'=>$n_remaining
    };
        
    print("returning: ".Dumper($return)."\n");
    
    #END genome_to_fbamodel
    my @_bad_returns;
    (ref($return) eq 'HASH') or push(@_bad_returns, "Invalid type for return variable \"return\" (value was \"$return\")");
    if (@_bad_returns) {
	my $msg = "Invalid returns passed to genome_to_fbamodel:\n" . join("", map { "\t$_\n" } @_bad_returns);
	Bio::KBase::Exceptions::ArgumentValidationError->throw(error => $msg,
							       method_name => 'genome_to_fbamodel');
    }
    return($return);
}




=head2 version 

  $return = $obj->version()

=over 4

=item Parameter and return types

=begin html

<pre>
$return is a string
</pre>

=end html

=begin text

$return is a string

=end text

=item Description

Return the module version. This is a Semantic Versioning number.

=back

=cut

sub version {
    return $VERSION;
}

=head1 TYPES



=head2 bool

=over 4



=item Description

A binary boolean


=item Definition

=begin html

<pre>
an int
</pre>

=end html

=begin text

an int

=end text

=back



=head2 genome_id

=over 4



=item Description

A string representing a Genome id.


=item Definition

=begin html

<pre>
a string
</pre>

=end html

=begin text

a string

=end text

=back



=head2 media_id

=over 4



=item Description

A string representing a Media id.


=item Definition

=begin html

<pre>
a string
</pre>

=end html

=begin text

a string

=end text

=back



=head2 template_id

=over 4



=item Description

A string representing a NewModelTemplate id.


=item Definition

=begin html

<pre>
a string
</pre>

=end html

=begin text

a string

=end text

=back



=head2 fbamodel_id

=over 4



=item Description

A string representing a FBAModel id.


=item Definition

=begin html

<pre>
a string
</pre>

=end html

=begin text

a string

=end text

=back



=head2 workspace_name

=over 4



=item Description

A string representing a workspace name.


=item Definition

=begin html

<pre>
a string
</pre>

=end html

=begin text

a string

=end text

=back



=head2 ws_fbamodel_id

=over 4



=item Description

The workspace ID for a FBAModel data object.
@id ws KBaseFBA.FBAModel


=item Definition

=begin html

<pre>
a string
</pre>

=end html

=begin text

a string

=end text

=back



=head2 GenomeToFBAModelParams

=over 4



=item Definition

=begin html

<pre>
a reference to a hash where the following keys are defined:
genome_id has a value which is a fba_tools.genome_id
genome_workspace has a value which is a fba_tools.workspace_name
template_id has a value which is a fba_tools.template_id
template_workspace has a value which is a fba_tools.workspace_name
media_id has a value which is a fba_tools.media_id
media_workspace has a value which is a fba_tools.workspace_name
fbamodel_id has a value which is a fba_tools.fbamodel_id
workspace has a value which is a fba_tools.workspace_name
coremodel has a value which is a fba_tools.bool
gapfill_model has a value which is a fba_tools.bool

</pre>

=end html

=begin text

a reference to a hash where the following keys are defined:
genome_id has a value which is a fba_tools.genome_id
genome_workspace has a value which is a fba_tools.workspace_name
template_id has a value which is a fba_tools.template_id
template_workspace has a value which is a fba_tools.workspace_name
media_id has a value which is a fba_tools.media_id
media_workspace has a value which is a fba_tools.workspace_name
fbamodel_id has a value which is a fba_tools.fbamodel_id
workspace has a value which is a fba_tools.workspace_name
coremodel has a value which is a fba_tools.bool
gapfill_model has a value which is a fba_tools.bool


=end text

=back



=head2 GenomeToFBAModelResults

=over 4



=item Definition

=begin html

<pre>
a reference to a hash where the following keys are defined:
new_fbamodel_ref has a value which is a fba_tools.ws_fbamodel_id

</pre>

=end html

=begin text

a reference to a hash where the following keys are defined:
new_fbamodel_ref has a value which is a fba_tools.ws_fbamodel_id


=end text

=back



=cut

1;
